import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'net.nemerosa:versioning:1.7.1'
    }
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    projectsWithCoverage = []
    jacocoMergeExecFile = "${buildDir}/reports/jacoco/test/jacocoTestReport.exec"
}


allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        jcenter()
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = jacocoVersion
}

subprojects { subprj ->
    apply plugin: 'java'
    apply plugin: 'org.kordamp.gradle.stats'
    apply from: rootProject.file('gradle/code-quality.gradle')

    subprj.tasks.withType(JavaCompile) {
        sourceCompatibility = subprj.sourceCompatibility
        targetCompatibility = subprj.targetCompatibility
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    if (subprj.publishJars.toBoolean()) {
        subprj.apply from: rootProject.file('gradle/publishing.gradle')
        subprj.apply from: rootProject.file('gradle/code-coverage.gradle')
        projectsWithCoverage << subprj

        javadoc {
            excludes = ['**/*.html', 'META-INF/**']

            options.use = true
            options.splitIndex = true
            options.encoding = 'UTF-8'
            options.author = true
            options.version = true
            options.windowTitle = "$project.name $project.version API"
            options.docTitle = "$project.name $project.version API"
            options.links = ['http://docs.oracle.com/javase/8/docs/api/',
                             'http://docs.oracle.com/javase/8/javafx/api/']
        }

        task sourcesJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            group 'Build'
            description 'An archive of the javadoc'
            classifier 'javadoc'
            from javadoc.destinationDir
        }

        jar.finalizedBy sourcesJar
        jar.finalizedBy javadocJar

        artifacts {
            sourcesJar
            javadocJar
        }

        dependencies {
            compile "org.slf4j:slf4j-api:$slf4jVersion"
            testCompile 'org.testng:testng:6.8.21'
            testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
            testCompile 'org.jmockit:jmockit:1.16'
        }

        test.useTestNG()
    }
}

evaluationDependsOnChildren()

/*
subprojects {
    configurations {
        all*.exclude group: 'commons-lang', module: 'commons-lang'
        all*.exclude group: 'ch.qos.logback', module: 'logback-classic'
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    }
}
*/

subprojects {
    task allDeps(type: DependencyReportTask) {}
/*
    configurations.all {
        resolutionStrategy.force "org.slf4j:slf4j-api:$slf4jVersion",
            "org.slf4j:jcl-over-slf4j:$slf4jVersion",
            'org.aspectj:aspectjweaver:1.8.8',
            "org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-jdbc:$springVersion",
            "org.springframework:spring-orm:$springVersion",
            "org.springframework:spring-tx:$springVersion"

        resolutionStrategy.failOnVersionConflict()
    }
*/
}

coveralls {
    sourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootMerge(type: org.gradle.testing.jacoco.tasks.JacocoMerge) {
    dependsOn = projectsWithCoverage.test
    dependsOn = projectsWithCoverage.jacocoTestReport
    executionData = files(projectsWithCoverage.jacocoTestReport.executionData)
    destinationFile = file(jacocoMergeExecFile)
}

task jacocoRootMergeReport(dependsOn: jacocoRootMerge, type: JacocoReport) {
    executionData files(projectsWithCoverage.jacocoTestReport.executionData)
    sourceDirectories = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    classDirectories = files(projectsWithCoverage.sourceSets.main.output)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        html.destination = "${buildDir}/reports/jacoco/test/html"
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}